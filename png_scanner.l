/*
    filename: compiler_hw3.l
*/

/* Definition section */
%{
    #include "common.h"
    #include "png_parser.tab.h"	/* header file generated by bison */
    extern YYSTYPE yylval;

    #define YY_NO_UNPUT
    #define YY_NO_INPUT
    
    int line_num = 0;
    int comment_num = 0;
    int last_comment_line = -1;
%}


/* Define regular expression label */
letter [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)

%x CMT
%x STR
%option yylineno

/* Rules section */
%%

"/*"        { BEGIN(CMT);
                if (line_num != last_comment_line) {
                    comment_num++;
                }
            }
<CMT>"*/"   { BEGIN(INITIAL);
                last_comment_line = line_num;
            }
<CMT>\n     {
                line_num++; comment_num++;
            }
<CMT>.      { ; }
"//".*      {
                if (line_num != last_comment_line) {
                    comment_num++;
                }
            }
"\""        { BEGIN(STR);
                return '"';
            }
<STR>"\""   { BEGIN(INITIAL);
                return '"';
            }
<STR>[^\"]* {
                yylval.s = strdup(yytext);
                return STRING_LIT; 
            }
"+"         { return '+'; }
"-"         { return '-'; }
"*"         { return '*'; }
"/"         { return '/'; }
"%"         { return '%'; }
"++"        { return INC; }
"--"        { return DEC; }

">"         { return '>'; }
"<"         { return '<'; }
">="        { return GEQ; }
"<="        { return LEQ; }
"=="        { return EQL; }
"!="        { return NEQ; }

"="         { return '='; }
"+="        { return ADD_ASSIGN; }
"-="        { return SUB_ASSIGN; }
"*="        { return MUL_ASSIGN; }
"/="        { return QUO_ASSIGN; }
"%="        { return REM_ASSIGN; }

"&&"        { return LAND; }
"||"        { return LOR; }
"!"         { return '!'; }

"("         { return '('; }
")"         { return ')'; }
"["         { return '['; }
"]"         { return ']'; }
"{"         { return '{'; }
"}"         { return '}'; }

":"         { return ':'; }
";"         { return ';'; }
","         { return ','; }
"\n"        { line_num++;
                return NEWLINE;
            }

"print"     { return PRINT; }
"println"   { return PRINTLN; }
"if"        { return IF; }
"else"      { return ELSE; }
"for"       { return FOR; }

"int32"     { return INT; }
"float32"   { return FLOAT;}
"string"    { return STRING; }
"bool"      { return BOOL; }
"true"      {
                yylval.b = true;
                return TRUE;
            }
"false"     {
                yylval.b = false;
                return FALSE;
            }
"var"       { return VAR; }
"package"   { return PACKAGE; }
"func"      { return FUNC; }
"return"    { return RETURN; }
"switch"    { return SWITCH; }
"case"      { return CASE; }
"default"   { return DEFAULT; }

{inumber}   {
                yylval.i = atoi(yytext);
                return INT_LIT;
            }
{fnumber}   {
                yylval.f = atof(yytext);
                return FLOAT_LIT;
            }
{id}        {
                yylval.ctr.id_name = strdup(yytext);
                return IDENT;
            }

<<EOF>>     { static int once = 0;
                if (once++) {
                    yyterminate();
                }
                line_num++;
                yylineno++;
                return NEWLINE;
            }
[ \t]+      { ; }
.           { ; }
%%

/*  C Code section */
int yywrap(void)
{
    return 1;
}
